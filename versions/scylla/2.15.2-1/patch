diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 954d5e1d..64834ee2 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -80,6 +80,7 @@ endif()
 
 if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion -Wno-sign-conversion -Wno-shorten-64-to-32 -Wno-undefined-var-template -Werror")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-implicit-int-float-conversion -Wno-string-conversion")
 elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") # To many superfluous warnings generated with GCC when using -Wconversion (see: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=40752)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
 endif()
diff --git a/src/random.cpp b/src/random.cpp
index ccc6b223..23597cb3 100644
--- a/src/random.cpp
+++ b/src/random.cpp
@@ -107,11 +107,6 @@ uint64_t get_random_seed(uint64_t seed) {
 #if defined(HAVE_GETRANDOM)
   num_bytes = static_cast<ssize_t>(syscall(SYS_getrandom, &seed, sizeof(seed), GRND_NONBLOCK));
   if (num_bytes < static_cast<ssize_t>(sizeof(seed))) {
-    char buf[STRERROR_BUFSIZE_];
-    char* err = STRERROR_R_(errno, buf, sizeof(buf));
-    LOG_WARN("Unable to read %u random bytes (%s): %u read",
-             static_cast<unsigned int>(sizeof(seed)), err, static_cast<unsigned int>(num_bytes));
-  } else {
     readurandom = false;
   }
 #endif // defined(HAVE_GETRANDOM)
diff --git a/tests/src/integration/integration.cpp b/tests/src/integration/integration.cpp
index ac397f64..169dc032 100644
--- a/tests/src/integration/integration.cpp
+++ b/tests/src/integration/integration.cpp
@@ -66,6 +66,7 @@ Integration::Integration()
     , is_keyspace_change_requested_(true)
     , is_test_chaotic_(false)
     , is_beta_protocol_(Options::is_beta_protocol())
+    , disable_tablets_(false)
     , protocol_version_(CASS_PROTOCOL_VERSION_V4)
     , create_keyspace_query_("")
     , start_time_(0ull) {
@@ -349,6 +350,13 @@ void Integration::connect(Cluster cluster) {
              << server_version_.to_string());
   }
 
+  // Check if scylla supports TABLETS feature. If so, and test
+  // does not work with tablets (e.g. it uses LWT), disable the tablets
+  // for test keyspace.
+  if (disable_tablets_ && scylla_supports_feature("TABLETS")) {
+    create_keyspace_query_ = create_keyspace_query_ + " AND TABLETS = { 'enabled': false }";
+  }
+
   // Create the keyspace for the integration test
   session_.execute(create_keyspace_query_);
   CHECK_FAILURE;
@@ -474,6 +482,19 @@ std::string Integration::generate_contact_points(const std::string& ip_prefix,
   return implode(contact_points, ',');
 }
 
+bool Integration::scylla_supports_feature(const std::string& feature) {
+  if (!Options::is_scylla()) {
+    return false;
+  }
+
+  Result res = session_.execute("SELECT supported_features FROM system.local WHERE key='local'");
+  Text supported_features = res.first_row().column_by_name<Text>("supported_features");
+  if (supported_features.is_null()) {
+    return false;
+  }
+  return supported_features.value().find(feature) != std::string::npos;
+}
+
 std::string Integration::format_string(const char* format, ...) const {
   // Create a buffer for the formatting of the string
   char buffer[FORMAT_BUFFER_SIZE] = { '\0' };
diff --git a/tests/src/integration/integration.hpp b/tests/src/integration/integration.hpp
index 4ac1f6f1..6441716e 100644
--- a/tests/src/integration/integration.hpp
+++ b/tests/src/integration/integration.hpp
@@ -309,6 +309,13 @@ protected:
    * (DEFAULT: true)
    */
   bool is_beta_protocol_;
+  /**
+   * Flag to indicate if tablets should be disabled for Scylla keyspace.
+   * There are some cases where the test logic will fail for tablets keyspace
+   * (e.g. when test uses LWT statements).
+   * (DEFAULT: false)
+   */
+  bool disable_tablets_;
   /**
    * Workload to apply to the cluster
    */
@@ -508,6 +515,14 @@ protected:
    */
   std::string generate_contact_points(const std::string& ip_prefix, size_t number_of_nodes);
 
+  /**
+   * Check to see if the Scylla supports a specific feature.
+   *
+   * @param feature Feature to check if supported by Scylla
+   * @return True if Scylla supports the feature; false otherwise
+   */
+  bool scylla_supports_feature(const std::string& feature);
+
   /**
    * Variable argument string formatter
    *
diff --git a/tests/src/integration/tests/test_exec_profile.cpp b/tests/src/integration/tests/test_exec_profile.cpp
index 2a12b42f..e109e2dd 100644
--- a/tests/src/integration/tests/test_exec_profile.cpp
+++ b/tests/src/integration/tests/test_exec_profile.cpp
@@ -183,7 +183,11 @@ private:
  */
 class DCExecutionProfileTest : public ExecutionProfileTest {
 public:
-  DCExecutionProfileTest() { number_dc2_nodes_ = 1; }
+  DCExecutionProfileTest() {
+    number_dc2_nodes_ = 1;
+    // Disable the use of tablets for this test, since LWT statements are used.
+    disable_tablets_ = true;
+  }
 
   void SetUp() {
     // Create the execution profiles for the test cases
